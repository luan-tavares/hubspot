#!/usr/bin/env php
<?php


$dir = __DIR__.'/vendor';

if (!file_exists($dir.'/autoload.php')) {
    $dir = __DIR__.'/../vendor';
}

if (!file_exists($dir.'/autoload.php')) {
    $dir = __DIR__.'/../../vendor';
}

if (!file_exists($dir.'/autoload.php')) {
    echo 'Autoload not found.';

    exit(1);
}

require $dir.'/autoload.php';

use LTL\Hubspot\Core\Handlers\Handlers;
use LTL\Hubspot\Core\Handlers\HandlersProvider;
use LTL\Hubspot\Core\HubspotConfig;

$basePath = HubspotConfig::BASE_PATH;

$template = file_get_contents($basePath . '/src/stubs/resource.stub');

$latestTemplate = file_get_contents($basePath . '/src/stubs/latestResource.stub');

$files = glob($basePath .'/src/schemas/*.json');

$resources = array_map(function ($path) {
    preg_match('/schemas\/(.*?)\.json/', $path, $match);
   
    return $match[1];
}, $files);


$i = $j = $totalActions = 0;
foreach ($resources as $resource) {
    $i++;
    $j = 0;
    $document = json_decode(file_get_contents($basePath . "/src/schemas/{$resource}.json"));

    $documentation = $document->documentation ?? null;

    $resourcePath = "{$basePath}/src/Resources";

    $content = $template;
    $content = str_replace('{{class}}', $document->class, $content);
    $content = str_replace('{{name}}', $resource, $content);
    $content = str_replace('{{version}}', $document->version, $content);

    $doc = '';

    if ($documentation) {
        $doc .= " * @link {$documentation}\n *\n";
    }
    
    foreach ($document->actions as $action => $actionSchema) {
        $j++;
        $totalActions++;
 
        $params = writeParams($actionSchema, $resource);
        
        $methodDocumentation = $actionSchema->documentation ?? $documentation;

        $description = $actionSchema->description ?? null;
    
        $doc .= " * @method static \$this {$action}({$params}) {$description}\n";

        if ($methodDocumentation) {
            $doc .= " * See {$methodDocumentation}\n";
        }
        $doc .= " *\n";

        $doc .= " * @method \$this {$action}({$params}) {$description}\n";

        if ($methodDocumentation) {
            $doc .= " * See {$methodDocumentation}\n";
        }
        $doc .= " *\n";
    }

    $content = str_replace('{{docs}}', $doc, $content);

    if (!is_dir("{$resourcePath}/V{$document->version}")) {
        mkdir("{$resourcePath}/V{$document->version}", 0775);
    }


    file_put_contents("{$resourcePath}/V{$document->version}/{$document->class}.php", $content);

    if ($document->latest ?? false) {
        $latestContent = $latestTemplate;
        $latestContent = str_replace('{{class}}', $document->class, $latestContent);
        $latestContent = str_replace('{{version}}', $document->version, $latestContent);
        file_put_contents("{$resourcePath}/{$document->class}.php", $latestContent);
    }

    $status = str_pad($i, 2, '0', STR_PAD_LEFT) ."â–• {$resource} ";

    $size = mb_strlen($status);

    dump($status . str_repeat('_', (40-$size)) .'  '. str_pad($j, 2, '0', STR_PAD_LEFT) .' actions');
}


$status = 'Total actions ';
$size = mb_strlen($status);
dump(str_repeat(' ', (40-$size)) . $status ." {$totalActions} actions");

function writeParams(object $actionSchema, string $resource): string
{
    if (!is_null(@$actionSchema->handler)) {
        return writeParamsWithHandler($actionSchema);
    }

    if (!in_array($actionSchema->method, HubspotConfig::METHODS)) {
        error_log("{$actionSchema->method} not Allowed in {$resource}!");

        exit;
    }

    preg_match_all('/\{(.*?)\}/', $actionSchema->path, $matches);

    $params = array_map(function ($item) {
        return 'int|string $'. $item;
    }, $matches[1]);

    $hasBody = $actionSchema->hasBody ?? true;

    if (in_array($actionSchema->method, HubspotConfig::METHODS_WITH_BODY)  && $hasBody) {
        $params[] = 'BaseBodyBuilder|array $requestBody';
    }

    return implode(', ', $params);
}

function writeParamsWithHandler(object $actionSchema): string
{
    $params = [];

    $handlerClass = HandlersProvider::HANDLERS[$actionSchema->handler];
    $reflectionClass = new ReflectionClass($handlerClass);
    $reflectionParameters = $reflectionClass->getMethod('handle')->getParameters();
    array_shift($reflectionParameters);
    foreach ($reflectionParameters as $reflectionParameter) {
        $type =  getTypes($reflectionParameter);

        $parameter = $reflectionParameter->name;

        if ($reflectionParameter->isDefaultValueAvailable()) {
            $parameter .= ' = '. $reflectionParameter->getDefaultValue();
        }

        $params[] = $type . ' $'. $parameter;
    }


    return implode(', ', $params);
}

function getTypes(ReflectionParameter $reflectionParameter): string
{
    $reflectionType = $reflectionParameter->getType();

    if ($reflectionType instanceof ReflectionUnionType) {
        $types = $reflectionType->getTypes();
        $names = array_map(function ($type) {
            return $type->getName();
        }, $types);

        return implode('|', $names);
    }

    return $reflectionType->getName();
}