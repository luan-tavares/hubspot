#!/usr/bin/env php
<?php


$dir = __DIR__.'/vendor';

if (!file_exists($dir.'/autoload.php')) {
    $dir = __DIR__.'/../vendor';
}

if (!file_exists($dir.'/autoload.php')) {
    $dir = __DIR__.'/../../vendor';
}

if (!file_exists($dir.'/autoload.php')) {
    echo 'Autoload not found.';

    exit(1);
}

require $dir.'/autoload.php';


use LTL\Hubspot\Core\Handlers\HandlersProvider;
use LTL\Hubspot\Core\HubspotConfig;

$basePath = HubspotConfig::BASE_PATH;

$template = file_get_contents($basePath . '/src/stubs/resource.stub');

$templateWithInterface = file_get_contents($basePath . '/src/stubs/resourceWithInterface.stub');

$templateInterface = file_get_contents($basePath . '/src/stubs/resourceInterface.stub');


$files = glob($basePath .'/src/schemas/*.json');

$resources = array_map(function ($path) {
    preg_match('/schemas\/(.*?)\.json/', $path, $match);
   
    return $match[1];
}, $files);


$i = $j = $totalActions = 0;
foreach ($resources as $resource) {
    $i++;
    $j = 0;
    $document = json_decode(file_get_contents($basePath . "/src/schemas/{$resource}.json"));



    $documentation = $document->documentation ?? null;

    $resourcePath = "{$basePath}/src/Resources";



    if(@$document->interface !== true) {

        $interfaceClass = @$document->interfaceClass;

        if($interfaceClass === null) {
            $content = $template;
        } else {
            $content = $templateWithInterface;

            if(gettype($interfaceClass) === 'array') {
                $replaceInterface = implode(', ', $document->interfaceClass);
            } else {
                $replaceInterface = $document->interfaceClass;
            }

            $content = str_replace('{{interface}}', $replaceInterface, $content);
        }
        $content = str_replace('{{name}}', $resource, $content);

    } else {
        $content = $templateInterface;
    }

    $content = str_replace('{{class}}', $document->class, $content);
    $content = str_replace('{{version}}', $document->version, $content);

    $doc = " * @template TIterator\n";
    $doc .= " * @extends Hubspot<TIterator>\n *\n";

    if ($documentation) {
        $doc .= " * @link {$documentation}\n *\n";
    }


    
    foreach ($document->actions as $action => $actionSchema) {
        $j++;
        $totalActions++;
 
        $params = writeParams($actionSchema, $resource, $action);
        
        $methodDocumentation = $actionSchema->documentation ?? $documentation;

        $description = $actionSchema->description ?? null;
 

        if(is_null(@$actionSchema->iteratorIndex)) {
            if(is_null($objectData = @$actionSchema->object)) {
                $object = 'self<null>';
            } else {
                $object = "Objects\\{$objectData}&self<null>";
            }
        } else {
            if(is_null($objectIterator = @$actionSchema->objectIterator)) {
                $oIterator = 'object';
            } else {
                $oIterator = "Objects\\{$objectIterator}";
            }

            if(is_null($objectData = @$actionSchema->object)) {
                $object = "self<{$oIterator}>";
            } else {
                $object = "Objects\\{$objectData}&self<{$oIterator}>";
            }
        }

        
    
        $doc .= " * @method static {$object} {$action}({$params}) {$description}\n";

        if ($methodDocumentation) {
            $doc .= " * See {$methodDocumentation}\n";
        }
        $doc .= " *\n";

        $doc .= " * @method {$object} {$action}({$params}) {$description}\n";

        if ($methodDocumentation) {
            $doc .= " * See {$methodDocumentation}\n";
        }
        $doc .= " *\n";
    }

    if(!is_null($object = @$actionSchema->object)) {
        $classObject = 'LTL\\Hubspot\\Objects\\'. $object;
        $reflectionClass = new ReflectionClass($classObject);

        $doc .= " * @method \\Iterator<int, {$classObject}> getIterator()\n *\n";
        
        $reflectionProperties = $reflectionClass->getProperties(ReflectionProperty::IS_PUBLIC|ReflectionProperty::IS_READONLY);

        foreach ($reflectionProperties as $reflectionProperty) {
            $reflectionType = $reflectionProperty->getType();
            $name = $reflectionProperty->getName();
            $a = '';

            if ($reflectionType instanceof ReflectionUnionType) {
                $types = $reflectionType->getTypes();
                $names = array_map(function (ReflectionNamedType $type) {
                    return  $type->getName();
                }, $types);
        
                $a =  implode('|', $names);
            } else {
                $a = $reflectionType->getName();

                if($reflectionType->allowsNull()) {
                    $a .= '|null';
                }
            }
    
            $doc .= " * @property {$a} \${$name}\n";
            
        }
    }

    $content = str_replace('{{docs}}', $doc, $content);


    if(@$document->interface !== true) {
        $path = "{$resourcePath}/V{$document->version}";
       
    } else {
        $path = "{$resourcePath}/V{$document->version}/Interfaces";
    }

    if (!is_dir($path)) {
        mkdir($path, 0775);
    }


    file_put_contents("{$path}/{$document->class}.php", $content);

    $status = str_pad($i, 2, '0', STR_PAD_LEFT) ."â–• {$resource} ";

    $size = mb_strlen($status);

    dump($status . str_repeat('_', (40-$size)) .'  '. str_pad($j, 2, '0', STR_PAD_LEFT) .' actions');


}


$status = 'Total actions ';
$size = mb_strlen($status);
dump(str_repeat(' ', (40-$size)) . $status ." {$totalActions} actions");

function writeParams(object $actionSchema, string $resource, string $action): string
{

 

    if (!is_null(@$actionSchema->handler)) {
        return writeParamsWithHandler($actionSchema);
    }

    if (!in_array($actionSchema->method, HubspotConfig::METHODS)) {
        error_log("{$actionSchema->method} not Allowed in {$resource}!");

        exit;
    }

    preg_match_all('/\{(.*?)\}/', $actionSchema->path, $matches);

    $params = array_map(function ($item) {
        return 'int|string $'. $item;
    }, $matches[1]);


    if(!is_null($queryAsParams = @$actionSchema->queryAsParam)) {
        foreach ($queryAsParams as $query => $param) {
            $params[] = "string|int \${$param}";
        }
    }

    $hasBody = $actionSchema->hasBody ?? true;

    if (in_array($actionSchema->method, HubspotConfig::METHODS_WITH_BODY)  && $hasBody) {
        $bodyType = ['array'];

        if(!is_null($bodyBuilder = @$actionSchema->bodyBuilder)) {
            $bodyType[] = "Body\\{$bodyBuilder}";
        }
        
        $bodyType = implode('|', $bodyType);
        $params[] = "{$bodyType} \$requestBody";
    }


    return implode(', ', $params);
}

function writeParamsWithHandler(object $actionSchema): string
{
    $params = [];

    $handlerClass = HandlersProvider::HANDLERS[$actionSchema->handler];
    $reflectionClass = new ReflectionClass($handlerClass);
    $reflectionParameters = $reflectionClass->getMethod('handle')->getParameters();
    array_shift($reflectionParameters);
    foreach ($reflectionParameters as $reflectionParameter) {
        $type =  getTypes($reflectionParameter);

        $parameter = $reflectionParameter->name;
       

        if ($reflectionParameter->isDefaultValueAvailable()) {
            $parameter .= ' = '. ($reflectionParameter->getDefaultValue() ?? 'null');
        }

        $params[] = $type . ' $'. $parameter;
    }


    return implode(', ', $params);
}

function getTypes(ReflectionParameter $reflectionParameter): string
{
    $reflectionType = $reflectionParameter->getType();

    if ($reflectionType instanceof ReflectionUnionType) {
        $types = $reflectionType->getTypes();
        $names = array_map(function ($type) {
            $typeName = str_replace('LTL\\HubspotRequestBody\\Resources', 'Body', $type->getName());

            return $typeName;
        }, $types);

        return implode('|', $names);
    }

    return $reflectionType->getName();
}
